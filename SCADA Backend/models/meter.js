const mongoose = require('mongoose');

exports.Meter=mongoose.model('Meter',new mongoose.Schema({
    
    timestamp:{type:Date, required:true},
    loggerNo:{type:Number, required:true, min:1, max: 25},
    plantId:{type:Number, required:true, min:1, max: 1000},
    deviceType:{type:Number, required:true, min:176, max: 200},
    deviceNo:{type:Number, required:true, min:0, max: 250},
    errorFlag:{type:Number, required:true, min:0, max: 1},
    solutionFlag:{type:String},

    temperature:{type:Number, min:-20, max: 120},
    voltagePhaseR:{type:Number},
    voltagePhaseY:{type:Number},
    voltagePhaseB:{type:Number},
    VoltageAvg:{type:Number},
    currentPhaseR:{type:Number},
    currentPhaseY:{type:Number},
    currentPhaseB:{type:Number},
    currentNeutral:{type:Number},
    activeCurrent:{type:Number},
    activePowerPhaseR:{type:Number},
    activePowerPhaseY:{type:Number},
    activePowerPhaseB:{type:Number},
    activePower:{type:Number},
    reactivePowerPhaseR:{type:Number},
    reactivePowerPhaseY:{type:Number},
    reactivePowerPhaseB:{type:Number},
    reactivePower:{type:Number},
    apparantPowerPhaseR:{type:Number},
    apparantPowerPhaseY:{type:Number},
    apparantPowerPhaseB:{type:Number},
    apparantPower:{type:Number},
    powerFactorPhaseR:{type:Number},
    powerFactorPhaseY:{type:Number},
    powerFactorPhaseB:{type:Number},
    powerFactor:{type:Number},
    frequency:{type:Number},
    activeEnergyImport:{type:Number},
	activeEnergyExport:{type:Number},
	netActiveEnergy:{type:Number},
	reactiveEnergyImport:{type:Number},
	reactiveEnergyExport:{type:Number},
	netReactiveEnergy:{type:Number},
	apparentEnergyImport:{type:Number},
	apparentEnergyExport:{type:Number},
	netApparentEnergy:{type:Number}
}));